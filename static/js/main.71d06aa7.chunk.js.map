{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoForm.js","components/FilterItem.js","constant.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","onRemoveTodo","onToggleCompleted","styleObj","textDecoration","completed","style","onClick","id","content","TodoList","props","todos","rest","map","key","TodoForm","onAddTodo","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","FilterItem","text","onUpdateFilter","filter","disabled","FILTER","Filter","paddingTop","App","shownTodos","setTodos","setFilter","newTodoContent","Math","floor","random","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71d06aa7.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Todo({ todo, onRemoveTodo, onToggleCompleted }) {\n  const styleObj = {\n    textDecoration: todo.completed ? 'line-through' : 'none'\n  }\n\n  return <tr>\n    <td\n      style={styleObj}\n      onClick={() => onToggleCompleted(todo.id)}\n    >\n      {todo.content}\n    </td>\n    <td>\n      <button onClick={() => onRemoveTodo(todo.id)}>&times;</button>\n    </td>\n  </tr>\n}\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo'\n\nfunction TodoList(props) {\n  const { todos, ...rest } = props\n\n  return (\n    <>\n      <h1>Todo List</h1>\n      <table>\n        <tbody>\n          {todos.map(todo =>\n            <Todo key={todo.id} todo={todo} {...rest} />\n          )}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default TodoList","import React, { useState } from 'react'\n\nfunction TodoForm({onAddTodo}) {\n  const [value, setValue] = useState('')\n\n  const onFormSubmit = e => {\n    e.preventDefault()\n\n    if (!onAddTodo) return\n    \n    onAddTodo(value)\n\n    setValue('')\n  }\n\n  return <form onSubmit={onFormSubmit}>\n    <input type=\"text\" value={value} onChange={e => setValue(e.target.value)}/>\n    <input type=\"submit\" value=\"Add Todo\"/>\n  </form>\n}\n\nexport default TodoForm","import React from 'react'\n\nexport default function FilterItem({ text, onUpdateFilter, filter }) {\n  return (\n    <button \n      onClick={() => onUpdateFilter(text)}\n      disabled={filter === text}\n    >\n      {text}\n    </button>\n  )\n}\n","export const FILTER = {\n  ALL: 'All',\n  COMPLETED: 'Completed',\n  ACTIVE: 'Active'\n}","import React from 'react'\nimport FilterItem from './FilterItem'\nimport { FILTER } from '../constant'\n\nexport default function Filter(props) {\n  return (\n    <div style={{ paddingTop: 10 }}>\n      Show:\n      <FilterItem text={FILTER.ALL} {...props} />\n      <FilterItem text={FILTER.ACTIVE} {...props} />\n      <FilterItem text={FILTER.COMPLETED} {...props} />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport TodoList from './components/TodoList'\nimport TodoForm from './components/TodoForm'\nimport Filter from './components/Filter'\nimport { FILTER } from './constant'\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    { id: 1, content: 'Buy milk', completed: false },\n    { id: 2, content: 'Buy peanut', completed: true }\n  ])\n\n  const [filter, setFilter] = useState(FILTER.ALL)\n\n  let shownTodos\n  switch (filter) {\n    case FILTER.COMPLETED:\n      shownTodos = todos.filter(todo => todo.completed)\n      break;\n\n    case FILTER.ACTIVE:\n      shownTodos = todos.filter(todo => !todo.completed)\n      break;\n\n    default:\n      shownTodos = todos\n      break;\n  }\n\n  const onRemoveTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  const onAddTodo = newTodoContent => {\n    setTodos([\n      ...todos,\n      {\n        id: Math.floor(Math.random() * 1000),\n        content: newTodoContent,\n        completed: false\n      }\n    ])\n  }\n\n  const onUpdateFilter = filter => {\n    setFilter(filter)\n  }\n\n  const onToggleCompleted = id => {\n    setTodos(todos.map(todo =>\n      todo.id === id\n        ? {\n          ...todo,\n          completed: !todo.completed\n        } : todo\n    ))\n  }\n\n  return (\n    <>\n      <TodoForm onAddTodo={onAddTodo} />\n      <Filter onUpdateFilter={onUpdateFilter} filter={filter} />\n      <TodoList todos={shownTodos} onRemoveTodo={onRemoveTodo} onToggleCompleted={onToggleCompleted} />\n    </>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from \"react-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}