{"version":3,"sources":["redux/reducers/todos.js","constant.js","redux/reducers/filter.js","redux/reducers/index.js","services/index.js","components/Todo.js","redux/actions/todos.js","components/TodoList.js","components/TodoForm.js","components/FilterItem.js","redux/actions/filter.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["initialState","FILTER","combineReducers","todos","state","action","type","allTodos","newTodo","filter","todo","id","map","updatedTodo","baseUrl","axios","get","post","delete","changedPart","patch","Todo","styleObj","textDecoration","completed","dispatch","useDispatch","style","onClick","todoId","todoServices","then","res","toggleTodo","data","catch","e","console","error","content","TodoList","shownTodos","useSelector","key","TodoForm","useState","value","setValue","onSubmit","preventDefault","addTodo","onChange","target","FilterItem","text","updateFilter","disabled","Filter","paddingTop","App","useEffect","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactElement","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.348a6ff2.chunk.js","sourcesContent":["const initialState = []\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case \"FETCH_TODOS\": {\n      return action.allTodos\n    }\n\n    case \"ADD_TODO\": {\n      return [\n        ...state,\n        action.newTodo\n      ]\n    }\n\n    case \"REMOVE_TODO\": {\n      return state.filter(todo => todo.id !== action.id)\n    }\n\n    case \"TOGGLE_TODO\": {\n      return state.map(todo =>\n        todo.id === action.updatedTodo.id\n          ? action.updatedTodo : todo\n      )\n    }\n\n    default:\n      return state\n  }\n}\n","export const FILTER = {\n  ALL: 'All',\n  COMPLETED: 'Completed',\n  ACTIVE: 'Active'\n}","import { FILTER } from '../../constant'\n\nconst initialState = FILTER.ALL\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case \"UPDATE_FILTER\": {\n      return action.filter\n    }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport filter from './filter'\n\nexport default combineReducers({\n  todos,\n  filter\n})","import axios from 'axios'\n\nconst baseUrl = 'https://hidden-thicket-98749.herokuapp.com/todos'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newTodo => {\n  return axios.post(baseUrl, newTodo) \n}\n\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, changedPart) => {\n  return axios.patch(`${baseUrl}/${id}`, changedPart)\n}\n\nexport default {\n  getAll,\n  create,\n  remove,\n  update\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { removeTodoAsync, toggleTodoAsync } from '../redux/actions/todos'\n\nfunction Todo({ todo }) {\n  const styleObj = {\n    textDecoration: todo.completed ? 'line-through' : 'none'\n  }\n\n  const dispatch = useDispatch()\n\n  const onToggleTodo = () => {\n    dispatch(toggleTodoAsync(todo.id, {\n      completed: !todo.completed\n    }))\n  }\n\n  return <tr>\n    <td\n      style={styleObj}\n      onClick={onToggleTodo}\n    >\n      {todo.content}\n    </td>\n    <td>\n      <button onClick={() => dispatch(removeTodoAsync(todo.id))}>&times;</button>\n    </td>\n  </tr>\n}\n\nexport default Todo","import todoServices from '../../services'\n\nconst fetchTodos = allTodos => ({\n  type: 'FETCH_TODOS',\n  allTodos\n})\n\nconst addTodo = newTodo => ({\n  type: 'ADD_TODO',\n  newTodo\n})\n\nconst removeTodo = id => ({\n  type: 'REMOVE_TODO',\n  id\n})\n\nconst toggleTodo = updatedTodo => ({\n  type: 'TOGGLE_TODO',\n  updatedTodo\n})\n\nexport const fetchTodosAsync = () => {\n  return dispatch => {\n    todoServices\n      .getAll()\n      .then(res => dispatch(fetchTodos(res.data)))\n      .catch(e => console.error(e))\n  }\n}\n\nexport const addTodoAsync = newTodo => {\n  return dispatch => {\n    todoServices\n      .create(newTodo)\n      .then(res => dispatch(addTodo(res.data)))\n      .catch(e => console.error(e))\n  }\n}\n\nexport const removeTodoAsync = todoId => {\n  return dispatch => {\n    todoServices\n      .remove(todoId)\n      .then(() => dispatch(removeTodo(todoId)))\n      .catch(e => console.error(e))\n  }\n}\n\nexport const toggleTodoAsync = (todoId, updatedTodo) => {\n  return dispatch => {\n    todoServices\n      .update(todoId, updatedTodo)\n      .then(res => dispatch(toggleTodo(res.data)))\n      .catch(e => console.error(e))\n  }\n}","import React from 'react'\nimport Todo from './Todo'\nimport { useSelector } from 'react-redux'\nimport { FILTER } from '../constant'\n\nfunction TodoList() {\n  const shownTodos = useSelector(state => {\n    switch (state.filter) {\n      case FILTER.COMPLETED:\n        return state.todos.filter(todo => todo.completed)\n\n      case FILTER.ACTIVE:\n        return state.todos.filter(todo => !todo.completed)\n\n      default: \n        return state.todos\n    }\n  })\n\n  return (\n    <>\n      <h1>Todo List</h1>\n      <table>\n        <tbody>\n          {shownTodos.map(todo =>\n            <Todo key={todo.id} todo={todo} />\n          )}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default TodoList","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addTodoAsync } from '../redux/actions/todos'\n\nfunction TodoForm() {\n  const [value, setValue] = useState('')\n  const dispatch = useDispatch()\n\n  const onFormSubmit = e => {\n    e.preventDefault()\n\n    dispatch(addTodoAsync({\n      content: value,\n      completed: false\n    }))\n    \n    setValue('')\n  }\n\n  return <form onSubmit={onFormSubmit}>\n    <input type=\"text\" value={value} onChange={e => setValue(e.target.value)}/>\n    <input type=\"submit\" value=\"Add Todo\"/>\n  </form>\n}\n\nexport default TodoForm","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateFilter } from '../redux/actions/filter'\n\nexport default function FilterItem({ text }) {\n  const filter = useSelector(state => state.filter)\n  const dispatch = useDispatch()\n\n  return (\n    <button \n      onClick={() => dispatch(updateFilter(text))}\n      disabled={filter === text}\n    >\n      {text}\n    </button>\n  )\n}\n","export const updateFilter = filter => ({\n  type: 'UPDATE_FILTER',\n  filter\n})","import React from 'react'\nimport FilterItem from './FilterItem'\nimport { FILTER } from '../constant'\n\nexport default function Filter() {\n  return (\n    <div style={{ paddingTop: 10 }}>\n      Show:\n      <FilterItem text={FILTER.ALL} />\n      <FilterItem text={FILTER.ACTIVE} />\n      <FilterItem text={FILTER.COMPLETED} />\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport TodoList from './components/TodoList'\nimport TodoForm from './components/TodoForm'\nimport Filter from './components/Filter'\nimport { fetchTodosAsync } from './redux/actions/todos'\nimport { useDispatch } from 'react-redux'\n\nfunction App() {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTodosAsync())\n  }, [dispatch])\n\n  return (\n    <>\n      <TodoForm />\n      <Filter />\n      <TodoList />\n    </>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from \"react-dom\";\n\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from \"./redux/reducers\"\nimport thunk from 'redux-thunk'\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n))\n\nconst ReactElement = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(ReactElement, rootElement);\n} else {\n  render(ReactElement, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}