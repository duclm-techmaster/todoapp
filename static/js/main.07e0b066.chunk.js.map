{"version":3,"sources":["redux/reducers/todos.js","constant.js","redux/reducers/filter.js","redux/reducers/index.js","components/Todo.js","redux/actions/todos.js","components/TodoList.js","components/TodoForm.js","components/FilterItem.js","redux/actions/filter.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["initialState","id","content","completed","FILTER","combineReducers","todos","state","action","type","Math","floor","random","filter","todo","map","Todo","styleObj","textDecoration","dispatch","useDispatch","style","onClick","TodoList","shownTodos","useSelector","key","TodoForm","useState","value","setValue","onSubmit","e","preventDefault","onChange","target","FilterItem","text","updateFilter","disabled","Filter","paddingTop","App","Boolean","window","location","hostname","match","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactElement","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07e0b066.chunk.js","sourcesContent":["const initialState = [\n  { id: 1, content: 'Buy milk', completed: false },\n  { id: 2, content: 'Buy peanut', completed: true }\n]\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case \"ADD_TODO\": {\n      return [\n        ...state,\n        {\n          id: Math.floor(Math.random() * 1000),\n          content: action.content,\n          completed: false\n        }\n      ]\n    }\n\n    case \"REMOVE_TODO\": {\n      return state.filter(todo => todo.id !== action.id)\n    }\n\n    case \"TOGGLE_TODO\": {\n      return state.map(todo =>\n        todo.id === action.id\n          ? {\n            ...todo,\n            completed: !todo.completed\n          } : todo\n      )\n    }\n\n    default:\n      return state\n  }\n}\n","export const FILTER = {\n  ALL: 'All',\n  COMPLETED: 'Completed',\n  ACTIVE: 'Active'\n}","import { FILTER } from '../../constant'\n\nconst initialState = FILTER.ALL\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case \"UPDATE_FILTER\": {\n      return action.filter\n    }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport filter from './filter'\n\nexport default combineReducers({\n  todos,\n  filter\n})","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { removeTodo, toggleTodo } from '../redux/actions/todos'\n\nfunction Todo({ todo }) {\n  const styleObj = {\n    textDecoration: todo.completed ? 'line-through' : 'none'\n  }\n\n  const dispatch = useDispatch()\n\n  return <tr>\n    <td\n      style={styleObj}\n      onClick={() => dispatch(toggleTodo(todo.id))}\n    >\n      {todo.content}\n    </td>\n    <td>\n      <button onClick={() => dispatch(removeTodo(todo.id))}>&times;</button>\n    </td>\n  </tr>\n}\n\nexport default Todo","export const addTodo = content => ({\n  type: 'ADD_TODO',\n  content\n})\n\nexport const removeTodo = id => ({\n  type: 'REMOVE_TODO',\n  id\n})\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n})","import React from 'react'\nimport Todo from './Todo'\nimport { useSelector } from 'react-redux'\nimport { FILTER } from '../constant'\n\nfunction TodoList() {\n  const shownTodos = useSelector(state => {\n    switch (state.filter) {\n      case FILTER.COMPLETED:\n        return state.todos.filter(todo => todo.completed)\n\n      case FILTER.ACTIVE:\n        return state.todos.filter(todo => !todo.completed)\n\n      default: \n        return state.todos\n    }\n  })\n\n  return (\n    <>\n      <h1>Todo List</h1>\n      <table>\n        <tbody>\n          {shownTodos.map(todo =>\n            <Todo key={todo.id} todo={todo} />\n          )}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default TodoList","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addTodo } from '../redux/actions/todos'\n\nfunction TodoForm() {\n  const [value, setValue] = useState('')\n  const dispatch = useDispatch()\n\n  const onFormSubmit = e => {\n    e.preventDefault()\n    \n    dispatch(addTodo(value))\n\n    setValue('')\n  }\n\n  return <form onSubmit={onFormSubmit}>\n    <input type=\"text\" value={value} onChange={e => setValue(e.target.value)}/>\n    <input type=\"submit\" value=\"Add Todo\"/>\n  </form>\n}\n\nexport default TodoForm","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateFilter } from '../redux/actions/filter'\n\nexport default function FilterItem({ text }) {\n  const filter = useSelector(state => state.filter)\n  const dispatch = useDispatch()\n\n  return (\n    <button \n      onClick={() => dispatch(updateFilter(text))}\n      disabled={filter === text}\n    >\n      {text}\n    </button>\n  )\n}\n","export const updateFilter = filter => ({\n  type: 'UPDATE_FILTER',\n  filter\n})","import React from 'react'\nimport FilterItem from './FilterItem'\nimport { FILTER } from '../constant'\n\nexport default function Filter() {\n  return (\n    <div style={{ paddingTop: 10 }}>\n      Show:\n      <FilterItem text={FILTER.ALL} />\n      <FilterItem text={FILTER.ACTIVE} />\n      <FilterItem text={FILTER.COMPLETED} />\n    </div>\n  )\n}\n","import React from 'react'\nimport TodoList from './components/TodoList'\nimport TodoForm from './components/TodoForm'\nimport Filter from './components/Filter'\n\nfunction App() {\n  return (\n    <>\n      <TodoForm />\n      <Filter />\n      <TodoList />\n    </>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from \"react-dom\";\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux';\nimport rootReducer from \"./redux/reducers\"\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nconst ReactElement = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(ReactElement, rootElement);\n} else {\n  render(ReactElement, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}